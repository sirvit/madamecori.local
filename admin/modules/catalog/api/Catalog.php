<?

namespace admin\modules\catalog\api;

use Yii;
use admin\models\Tag;
use admin\models\TagAssign;
use admin\modules\catalog\models\ItemData;
use admin\modules\catalog\models\Category;
use admin\modules\catalog\models\Item;
use admin\modules\catalog\models\Group;
use admin\modules\catalog\models\Brand;

/**
 * Catalog module Api
 * @package admin\modules\catalog\api
 *
 * @method static CategoryObject category(mixed $id_slug) Get catalog category by id or slug
 * @method static array tree() Get catalog categories as tree
 * @method static array categories() Get catalog categories as flat array
 * @method static array items(array $options = []) Get list of items as ItemObject objects
 * @method static ItemObject get(mixed $id_slug) Get item object by id or slug
 * @method static mixed last(int $limit = 1, mixed $where = null) Get last items, use $where option for fetching items from special category
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */
class Catalog extends \admin\base\Api {

    private $_categories;
    private $_groups;
    private $_items;
    private $_brands;
    private $_groups_last;
    private $_items_last;

    //Category
    public function api_category($id_slug = 'catalog') {
        if (!isset($this->_categories[$id_slug])) {
            $this->_categories[$id_slug] = $this->findCategory($id_slug);
        }
        return $this->_categories[$id_slug];
    }

    //Group
    public function api_group($id) {
        if (!isset($this->_groups[$id])) {
            $this->_groups[$id] = $this->findGroup($id);
        }
        return $this->_groups[$id];
    }

    public function api_groups_last($limit = 1, $where = null) {
        if ($limit === 1 && $this->_groups_last) {
            return $this->_groups_last;
        }

        $query = Group::find()->sortDate()->status(Group::STATUS_ON)->limit($limit);
        if ($where) {
            $query->andFilterWhere($where);
        }

        $cache = Yii::$app->cache;
        $key = $cache->buildKey($query);
        $result = $cache->get($key);
        if ($result === false) {
            $result = [];
            foreach ($query->all() as $group) {
                $result[] = new GroupObject($group);
            }
            $cache->set($key, $result, 3600);
        }
        if ($limit > 1) {
            return $result;
        } else {
            $this->_groups_last = count($result) ? $result[0] : null;
            return $this->_groups_last;
        }
    }

    //Item
    public function api_item($id_slug) {
        if (!isset($this->_items[$id_slug])) {
            $this->_items[$id_slug] = $this->findItem($id_slug);
        }
        return $this->_items[$id_slug];
    }

    public function api_items_last($limit = 1, $where = null) {
        if ($limit === 1 && $this->_items_last) {
            return $this->_items_last;
        }

        $flat = Category::flat();
        foreach ($flat as $category) {
            $ids[] = $category->id;
        }

        $query = Item::find()->where(['in', 'category_id', $ids])->sortDate()->status(Group::STATUS_ON)->limit($limit);
        if ($where) {
            $query->andFilterWhere($where);
        }

        $cache = Yii::$app->cache;
        $key = $cache->buildKey($query);
        $result = $cache->get($key);
        if ($result === false) {
            $result = [];
            foreach ($query->all() as $item) {
                $result[] = new ItemObject($item);
            }
            $cache->set($key, $result, 3600);
        }
        if ($limit > 1) {
            return $result;
        } else {
            $this->_items_last = count($result) ? $result[0] : null;
            return $this->_items_last;
        }
    }

    //Brand section
    public function api_brand($id_slug) {
        if (!isset($this->_brands[$id_slug])) {
            $this->_brands[$id_slug] = $this->findBrand($id_slug);
        }
        return $this->_brands[$id_slug];
    }

    private function findCategory($id_slug) {
        $category = Category::find()->where(['or', 'id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(Category::STATUS_ON)->one();

        return $category ? new CategoryObject($category) : null;
    }

    private function findItem($id_slug) {
        if (!($item = Item::find()->where(['or', 'id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(Item::STATUS_ON)->one())) {
            return null;
        }

        return new ItemObject($item);
    }

    private function findGroup($id) {
        if (!($group = Group::find()->where(['id' => $id])->status(Group::STATUS_ON)->one())) {
            return null;
        }

        return new GroupObject($group);
    }

    private function findBrand($id_slug) {
        $brand = Brand::find()->where(['or', 'id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(Brand::STATUS_ON)->one();

        return $brand ? new BrandObject($brand) : null;
    }

    public static function applyFiltersAndSortForGroups($filters, $sort, $query) {
        if (is_array($filters) || is_array($sort)) {

            if (!empty($filters['brand_id'])) {
                if (is_array($filters['brand_id'])) {
                    $query->andWhere(['in', 'brand_id', $filters['brand_id']]);
                } else {
                    $query->andFilterWhere(['=', 'brand_id', (int) $filters['brand_id']]);
                }
                unset($filters['brand_id']);
            }
            if (!empty($filters['category_id'])) {
                $query->andFilterWhere(['=', 'category_id', (int) $filters['category_id']]);
                unset($filters['category_id']);
            }

            $itemQuery = Item::find()->select('id, group_id, title, price, time')->groupBy('group_id');
            if (!empty($filters['price'])) {
                $price = $filters['price'];
                if (is_array($price) && count($price) == 2) {
                    if (!$price[0]) {
                        $itemQuery->andFilterWhere(['<=', 'price', (int) $price[1]]);
                    } elseif (!$price[1]) {
                        $itemQuery->andFilterWhere(['>=', 'price', (int) $price[0]]);
                    } else {
                        $itemQuery->andFilterWhere(['between', 'price', (int) $price[0], (int) $price[1]]);
                    }
                }
                unset($filters['price']);
            }

            //Фильтрация по тегу
            if (!empty($filters['tag'])) {

                $tagQuery = Tag::find()->select('id');
                $tagQuery->andFilterWhere(['=', 'name', $filters['tag']]);

                $tagAssignQuery = TagAssign::find()->select('item_id as tag_assign_item_id');
                $tagAssignQuery->andFilterWhere(['=', 'class', 'admin\modules\catalog\models\Item']);
                $tagAssignQuery->join('INNER JOIN', ['tag' => $tagQuery], 'tag.id = ' . TagAssign::tableName() . '.tag_id');

                $itemQuery->join('INNER JOIN', ['tag_assign' => $tagAssignQuery], 'tag_assign.tag_assign_item_id = ' . Item::tableName() . '.id');

                unset($filters['tag']);
            }


            $filters2Applied = 0;
            if (is_array($filters) && count($filters)) {

                $subQuery = ItemData::find()->select('item_id as si');
                foreach ($filters as $field => $value) {
                    if (!is_array($value)) {
                        $subQuery->orFilterWhere(['and', ['name' => $field], ['value' => $value]]);
                        $filters2Applied++;
                    } elseif (count($value) == 2) {
                        if (!$value[0]) {
                            $additionalCondition = ['<=', 'value', (int) $value[1]];
                        } elseif (!$value[1]) {
                            $additionalCondition = ['>=', 'value', (int) $value[0]];
                        } else {
                            $additionalCondition = ['between', 'value', (int) $value[0], (int) $value[1]];
                        }
                        $subQuery->orFilterWhere(['and', ['name' => $field], $additionalCondition]);

                        $filters2Applied++;
                    }
                }
                if ($filters2Applied) {
                    $itemQuery->join('INNER JOIN', ['f' => $subQuery], 'f.si = ' . Item::tableName() . '.id');
                }
            }
            $query->join('INNER JOIN', ['i' => $itemQuery], 'i.group_id = ' . Group::tableName() . '.id');
            $query->orderBy($sort);
        }

        if (empty($sort)) {
            $query->sortDate();
        }

        return $query;
    }

    public static function applyFiltersForItems($filters, $query) {
        if (is_array($filters)) {

            if (!empty($filters['price'])) {
                $price = $filters['price'];
                if (is_array($price) && count($price) == 2) {
                    if (!$price[0]) {
                        $query->andFilterWhere(['<=', 'price', (int) $price[1]]);
                    } elseif (!$price[1]) {
                        $query->andFilterWhere(['>=', 'price', (int) $price[0]]);
                    } else {
                        $query->andFilterWhere(['between', 'price', (int) $price[0], (int) $price[1]]);
                    }
                }
                unset($filters['price']);
            }

            if (!empty($filters['brand_id'])) {
                if (is_array($filters['brand_id'])) {
                    $query->andWhere(['in', 'brand_id', $filters['brand_id']]);
                } else {
                    $query->andFilterWhere(['=', 'brand_id', (int) $filters['brand_id']]);
                }
                unset($filters['brand_id']);
            }

            if (!empty($filters['category_id'])) {
                $query->andFilterWhere(['=', 'category_id', (int) $filters['category_id']]);
                unset($filters['category_id']);
            }

            if (!empty($filters['status'])) {
                $query->andFilterWhere(['=', 'status', (int) $filters['status']]);
                unset($filters['status']);
            }
            
            //Фильтрация по тегу
            if (!empty($filters['tag'])) {

                $tagQuery = Tag::find()->select('id');
                $tagQuery->andFilterWhere(['=', 'name', $filters['tag']]);

                $tagAssignQuery = TagAssign::find()->select('item_id as tag_assign_item_id');
                $tagAssignQuery->andFilterWhere(['=', 'class', 'admin\modules\catalog\models\Item']);
                $tagAssignQuery->join('INNER JOIN', ['tag' => $tagQuery], 'tag.id = ' . TagAssign::tableName() . '.tag_id');

                $query->join('INNER JOIN', ['tag_assign' => $tagAssignQuery], 'tag_assign.tag_assign_item_id = ' . Item::tableName() . '.id');

                unset($filters['tag']);
            }

            if (count($filters)) {
                $filtersApplied = 0;
                $subQuery = ItemData::find()->select('item_id, COUNT(*) as filter_matched')->groupBy('item_id');
                foreach ($filters as $field => $value) {
                    if (!is_array($value)) {
                        $subQuery->orFilterWhere(['and', ['name' => $field], ['value' => $value]]);
                        $filtersApplied++;
                    } elseif (count($value) == 2) {
                        if (!$value[0]) {
                            $additionalCondition = ['<=', 'value', (int) $value[1]];
                        } elseif (!$value[1]) {
                            $additionalCondition = ['>=', 'value', (int) $value[0]];
                        } else {
                            $additionalCondition = ['between', 'value', (int) $value[0], (int) $value[1]];
                        }
                        $subQuery->orFilterWhere(['and', ['name' => $field], $additionalCondition]);

                        $filtersApplied++;
                    }
                }
                if ($filtersApplied) {
                    $query->join('LEFT JOIN', ['f' => $subQuery], 'f.item_id = ' . Item::tableName() . '.id');
                    $query->andFilterWhere(['f.filter_matched' => $filtersApplied]);
                }
            }
        }
        return $query;
    }

}
