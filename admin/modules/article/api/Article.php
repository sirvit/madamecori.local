<?

namespace admin\modules\article\api;

use Yii;
use yii\data\ActiveDataProvider;

use admin\models\Tag;
use admin\modules\article\models\Category;
use admin\modules\article\models\Item;
use yii\widgets\LinkPager;

/**
 * Article module Api
 * @package admin\modules\article\api
 *
 * @method static CategoryObject category(mixed $id_slug) Get article category by id or slug
 * @method static array tree() Get article categories as tree
 * @method static array categories() Get article categories as flat array
 * @method static array items(array $options = []) Get list of articles as ArticleObject objects
 * @method static ArticleObject get(mixed $id_slug) Get article object by id or slug
 * @method static mixed last(int $limit = 1) Get last articles
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */
class Article extends \admin\base\Api {

    private $_categories;
    private $_items;
    private $_adp;
    private $_item = [];
    private $_last;

    public function api_category($id_slug) {
        if (!isset($this->_categories[$id_slug])) {
            $this->_categories[$id_slug] = $this->findCategory($id_slug);
        }
        return $this->_categories[$id_slug];
    }

    public function api_tree($id_slug = '') {
        return Category::tree($id_slug);
    }
    
    public function api_categories() {
        return Category::flat();
    }

    public function api_items($options = []) {
        if (!$this->_items) {
            $this->_items = [];

            $with = ['seoText', 'category'];
            if (Yii::$app->getModule('admin')->activeModules['article']->settings['enableTags']) {
                $with[] = 'tags';
            }
            $query = Item::find()->with($with)->status(Item::STATUS_ON);

            if (!empty($options['where'])) {
                $query->andFilterWhere($options['where']);
            }
            if (!empty($options['tags'])) {
                $query
                        ->innerJoinWith('tags', false)
                        ->andWhere([Tag::tableName() . '.name' => (new Item())->filterTagValues($options['tags'])])
                        ->addGroupBy('item_id');
            }
            if (!empty($options['orderBy'])) {
                $query->orderBy($options['orderBy']);
            } else {
                $query->sortDate();
            }

            $this->_adp = new ActiveDataProvider([
                'query' => $query,
                'pagination' => !empty($options['pagination']) ? $options['pagination'] : []
            ]);

            foreach ($this->_adp->models as $model) {
                $this->_items[] = new ArticleObject($model);
            }
        }
        return $this->_items;
    }

    public function api_last($limit = 1, $where = null) {
        if ($limit === 1 && $this->_last) {
            return $this->_last;
        }

        $result = [];

        $with = ['seoText'];
        if (Yii::$app->getModule('admin')->activeModules['article']->settings['enableTags']) {
            $with[] = 'tags';
        }
        $query = Item::find()->with($with)->status(Item::STATUS_ON)->sortDate()->limit($limit);
        if ($where) {
            $query->andFilterWhere($where);
        }

        foreach ($query->all() as $item) {
            $result[] = new ArticleObject($item);
        }

        if ($limit > 1) {
            return $result;
        } else {
            $this->_last = count($result) ? $result[0] : null;
            return $this->_last;
        }
    }

    public function api_get($slug) {
        if (!isset($this->_item[$slug])) {
            $this->_item[$slug] = $this->findItem($slug);
        }
        return $this->_item[$slug];
    }

    public function api_pagination() {
        return $this->_adp ? $this->_adp->pagination : null;
    }

    public function api_pages() {
        return $this->_adp ? LinkPager::widget(['pagination' => $this->_adp->pagination]) : '';
    }

    private function findCategory($slug) {
        $category = Category::find()->where(['slug' => $slug])->status(Item::STATUS_ON)->one();

        return $category ? new CategoryObject($category) : null;
    }

    private function findItem($slug) {
        $article = Item::find()->where(['slug' => $slug])->status(Item::STATUS_ON)->one();
        if ($article) {
            $article->updateCounters(['views' => 1]);
            return new ArticleObject($article);
        } else {
            return null;
        }
    }

}
